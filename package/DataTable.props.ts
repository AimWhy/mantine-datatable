import { MantineColor, MantineSize, MantineTheme, TableProps } from '@mantine/core';
import { ReactNode } from 'react';

export type DataTablePaginationProps =
  | {
      page?: never;
      onPageChange?: never;
      totalRecords?: never;
      recordsPerPage?: never;
      paginationSize?: never;
    }
  | {
      /** Current page number (1-based); if provided, a pagination component is shown */
      page: number;
      /** Callback fired after change of each page */
      onPageChange: (page: number) => void;
      /** Total number of records in the dataset */
      totalRecords: number | undefined;
      /** Number of records per page */
      recordsPerPage: number;
      /** Pagination component size; defaults to `sm` */
      paginationSize?: MantineSize;
    };

export type DataTableColumn<T> = {
  /** Column property name (use dot-notation for nested objects property drilling) */
  propertyName: string;
  /** If set, the column will only be visible according to the specified media query */
  visibleMediaQuery?: string;
  /** Optional column header title; if not present, one will be generated by applying `lodash`'s `upperFirst` & `lowerCase` to the provided column name */
  title?: string;
  /** Custom cell data render function accepting the current record */
  render?: (record: T) => ReactNode;
  /** Column alignment; defaults to `left` */
  textAlign?: 'center' | 'right';
  /** If true, column will be sortable */
  sortable?: boolean;
  /** Desired column width */
  width?: string | number;
  /** If true, cell content in this column will be truncated with ellipsis as needed */
  ellipsis?: boolean;
};

export type DataTableSortStatus = {
  /** Sort column property name (use dot-notation for nested objects property drilling) */
  propertyName: string;
  /** Sort direction; `asc` for ascending or `desc` for descending */
  direction: 'asc' | 'desc';
};

export type DataTableSortProps =
  | {
      sortStatus?: never;
      onSortStatusChange?: never;
    }
  | {
      /** Current sort status (sort column property name & direction) */
      sortStatus: DataTableSortStatus;
      /** Callback fired after change of sort status */
      onSortStatusChange?: (sortStatus: DataTableSortStatus) => void;
    };

export type DataTableSelectionProps<T> =
  | {
      selectedRecords?: never;
      onSelectedRecordsChange?: never;
    }
  | {
      /** Currently-selected records */
      selectedRecords: T[];
      /** Callback fired after change of selected records */
      onSelectedRecordsChange?: (selectedRecords: T[]) => void;
    };

export type DataTableProps<T> = {
  /** Table height; defaults to `100%` */
  height?: string | number;
  /** Minimum table height */
  minHeight?: string | number;
  /** If true, cells will have vertical borders */
  withVerticalBorders?: boolean;
  /** Vertical alignment for cells; defaults to `middle` */
  verticalAlign?: 'top' | 'bottom';
  /** If true, will show a loader with semi-transparent background, centered over the table */
  fetching?: boolean;
  /** Visible columns */
  columns: DataTableColumn<T>[];
  /** Property name to use as unique record key (use dot-notation for nested objects property drilling); defaults to `id` */
  idPropertyName?: string;
  /** Property name of the column to expand (use dot-notation for nested objects property drilling) */
  expandedColumnPropertyName?: string;
  /** Visible records */
  records?: T[];
  /** Text to show when fetching records; defaults to `Loadingâ€¦` */
  loadingText?: string;
  /** Loader size; defaults to `lg` */
  loaderSize?: MantineSize;
  /** Loader variant */
  loaderVariant?: MantineTheme['loader'];
  /** Loader background blur (in pixels) */
  loaderBackgroundBlur?: number;
  /** Text to show when no records are available */
  noRecordsText?: string;
  /** Row actions menu */
  rowMenu?: {
    /** `click` will show the menu when row is clicked, `rightClick` will show the menu when row is right-clicked; defaults to `rightClick` */
    trigger?: 'click' | 'rightClick';
    /** If true or a function returning true, the menu will not be shown */
    hidden?: boolean | ((data: T | T[]) => boolean);
    /** Menu items */
    items: {
      /** Unique item key */
      key: string;
      /** Item icon */
      icon?: ReactNode | ((record: T) => ReactNode);
      /** Item title  */
      title?: string | ((record: T) => string);
      /** Item color */
      color?: MantineColor | ((record: T) => MantineColor);
      /** If true or a function returning true, the menu item will not be shown */
      hidden?: boolean | ((record: T) => boolean);
      /** If true or a function returning true, the menu item will be disabled */
      disabled?: boolean | ((record: T) => boolean);
      /** Function to call when the menu item is clicked */
      onClick: (record: T) => void;
    }[];
  };
} & TableProps &
  DataTablePaginationProps &
  DataTableSortProps &
  DataTableSelectionProps<T>;
