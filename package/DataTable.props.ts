import { MantineColor, MantineNumberSize, MantineTheme, TableProps } from '@mantine/core';
import { ReactNode } from 'react';

export type DataTableColumnTextAlignment = 'left' | 'center' | 'right';
export type DataTableVerticalAlignment = 'top' | 'center' | 'bottom';

export type DataTableBorderProps =
  | {
      withBorder?: never;
      borderRadius?: never;
    }
  | {
      /**
       * If true, table will have border
       */
      withBorder: boolean;

      /**
       * Table border radius
       */
      borderRadius?: MantineNumberSize;
    };

export type DataTablePaginationProps =
  | {
      page?: never;
      onPageChange?: never;
      totalRecords?: never;
      recordsPerPage?: never;
      paginationSize?: never;
    }
  | {
      /**
       * Current page number (1-based); if provided, a pagination component is shown
       */
      page: number;

      /**
       * Callback fired after change of each page
       */
      onPageChange: (page: number) => void;

      /**
       * Total number of records in the dataset
       */
      totalRecords: number | undefined;

      /**
       * Number of records per page
       */
      recordsPerPage: number;

      /**
       * Pagination component size; defaults to `sm`
       */
      paginationSize?: MantineNumberSize;
    };

export type DataTableColumn<T> = {
  /**
   * Column accessor; you can use dot-notation for nested objects property drilling
   * (i.e. `department.name` or `department.company.name` - see https://lodash.com/docs#get)
   */
  accessor: string;

  /**
   * If set, the column will only be visible according to the specified media query
   */
  visibleMediaQuery?: string | ((theme: MantineTheme) => string);

  /**
   * Optional column header title; if not present, one will be generated by applying `lodash`'s
   * `upperFirst` & `lowerCase` to the provided column accessor
   */
  title?: ReactNode;

  /**
   * Custom cell data render function accepting the current record
   */
  render?: (record: T) => ReactNode;

  /**
   * Column text alignment; defaults to `left`
   */
  textAlignment?: DataTableColumnTextAlignment;

  /**
   * If true, column will be sortable
   */
  sortable?: boolean;

  /**
   * Desired column width
   */
  width?: string | number;

  /**
   * If true, cell content in this column will be truncated with ellipsis as needed
   */
  ellipsis?: boolean;
};

export type DataTableSortStatus = {
  /**
   * Sort column accessor; you can use dot-notation for nested objects property drilling
   * (i.e. `department.name` or `department.company.name` - see https://lodash.com/docs#get)
   */
  columnAccessor: string;

  /**
   * Sort direction; `asc` for ascending or `desc` for descending
   */
  direction: 'asc' | 'desc';
};

export type DataTableSortProps =
  | {
      sortStatus?: never;
      onSortStatusChange?: never;
    }
  | {
      /**
       * Current sort status (sort column accessor & direction)
       */
      sortStatus: DataTableSortStatus;

      /**
       * Callback fired after change of sort status
       */
      onSortStatusChange?: (sortStatus: DataTableSortStatus) => void;
    };

export type DataTableSelectionProps<T> =
  | {
      selectedRecords?: never;
      onSelectedRecordsChange?: never;
    }
  | {
      /**
       * Currently-selected records
       */
      selectedRecords: T[];

      /**
       * Callback fired after change of selected records
       */
      onSelectedRecordsChange?: (selectedRecords: T[]) => void;
    };

export type DataTableProps<T> = {
  /**
   * Table height; defaults to `100%`
   */
  height?: string | number;

  /**
   * Minimum table height
   */
  minHeight?: string | number;

  /**
   * If true, columns will have vertical borders
   */
  withColumnBorders?: boolean;

  /**
   * Vertical alignment for row cells; defaults to `center`
   */
  verticalAlignment?: DataTableVerticalAlignment;

  /**
   * If true, will show a loader with semi-transparent background, centered over the table
   */
  fetching?: boolean;

  /**
   * Visible columns
   */
  columns: DataTableColumn<T>[];

  /**
   * Accessor to use as unique record key; you can use dot-notation for nested objects property drilling
   * (i.e. `department.name` or `department.company.name` - see https://lodash.com/docs#get);
   * defaults to `id`
   */
  idAccessor?: string;

  /**
   * Visible records; the `DataTable` component will try to infer its row type from here
   */
  records?: T[];

  /**
   * Loader size; defaults to `lg`
   */
  loaderSize?: MantineNumberSize;

  /**
   * Loader variant
   */
  loaderVariant?: MantineTheme['loader'];

  /**
   * Loader background blur (in pixels)
   */
  loaderBackgroundBlur?: number;

  /**
   * Text to show when no records are available
   */
  noRecordsText?: string;

  /**
   * Function to call when a row is clicked
   */
  onRowClick?: (record: T) => void;

  /**
   * Context-menu to show when right-clicking a row
   */
  rowContextMenu?: {
    /**
     * Boolean or function accepting the current record as parameter returning boolean;
     * if true, the menu will not be shown
     */
    disabled?: boolean | ((record: T) => boolean);

    /**
     * Menu items
     */
    items: {
      /**
       * Unique item key
       */
      key: string;

      /**
       * Item icon; ReactNode or a function accepting the current record as parameter
       * and returning ReactNode
       */
      icon?: ReactNode | ((record: T) => ReactNode);

      /**
       * Item title; ReactNode or a function accepting the current record as parameter
       * and returning ReactNode
       */
      title?: ReactNode | ((record: T) => ReactNode);

      /**
       * Item color; MantineColor or a function accepting the current record as parameter
       * and returning MantineColor
       */
      color?: MantineColor | ((record: T) => MantineColor);

      /**
       * Boolean or function accepting the current record as parameter and returning boolean;
       * if true, the menu item will not be shown
       */
      hidden?: boolean | ((record: T) => boolean);

      /**
       * Boolean or function accepting the current record as parameter returning boolean;
       * if true, the menu item will be disabled
       */
      disabled?: boolean | ((record: T) => boolean);

      /**
       * Function to call when the menu item is clicked; accepts the current record as parameter
       */
      onClick: (record: T) => void;
    }[];
  };
} & Omit<TableProps, 'border'> &
  DataTableBorderProps &
  DataTablePaginationProps &
  DataTableSortProps &
  DataTableSelectionProps<T>;
